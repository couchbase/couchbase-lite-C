//
//  CBLDefaults_CAPI.cc
//  CouchbaseLite
//
//  Copyright (c) 2024-present Couchbase, Inc All rights reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

// THIS IS AN AUTOGENERATED FILE, MANUAL CHANGES SHOULD BE EXPECTED TO
// BE OVERWRITTEN


#include "CBLDefaults.h"
#include <climits>

#pragma mark - CBLLogFileConfiguration

CBL_PUBLIC const bool kCBLDefaultLogFileUsePlaintext = false;
CBL_PUBLIC const bool kCBLDefaultLogFileUsePlainText = false;
CBL_PUBLIC const size_t kCBLDefaultLogFileMaxSize = 524288;
CBL_PUBLIC const uint32_t kCBLDefaultLogFileMaxRotateCount = 1;

#pragma mark - CBLFullTextIndexConfiguration

CBL_PUBLIC const bool kCBLDefaultFullTextIndexIgnoreAccents = false;

#pragma mark - CBLReplicatorConfiguration

CBL_PUBLIC const CBLReplicatorType kCBLDefaultReplicatorType = kCBLReplicatorTypePushAndPull;
CBL_PUBLIC const bool kCBLDefaultReplicatorContinuous = false;
CBL_PUBLIC const unsigned kCBLDefaultReplicatorHeartbeat = 300;
CBL_PUBLIC const unsigned kCBLDefaultReplicatorMaxAttemptsSingleShot = 10;
CBL_PUBLIC const unsigned kCBLDefaultReplicatorMaxAttemptsContinuous = UINT_MAX;
CBL_PUBLIC const unsigned kCBLDefaultReplicatorMaxAttemptsWaitTime = 300;
CBL_PUBLIC const unsigned kCBLDefaultReplicatorMaxAttemptWaitTime = 300;
CBL_PUBLIC const bool kCBLDefaultReplicatorDisableAutoPurge = false;
CBL_PUBLIC const bool kCBLDefaultReplicatorAcceptParentCookies = false;

#ifdef COUCHBASE_ENTERPRISE

#pragma mark - CBLVectorIndexConfiguration

CBL_PUBLIC const bool kCBLDefaultVectorIndexLazy = false;
CBL_PUBLIC const CBLDistanceMetric kCBLDefaultVectorIndexDistanceMetric = kCBLDistanceMetricEuclidean;
CBL_PUBLIC const unsigned kCBLDefaultVectorIndexMinTrainingSize = 0;
CBL_PUBLIC const unsigned kCBLDefaultVectorIndexMaxTrainingSize = 0;
CBL_PUBLIC const unsigned kCBLDefaultVectorIndexNumProbes = 0;

#endif
